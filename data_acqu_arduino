// ****************************************************************************************
// BACHA Abdelkabir - Equipe EAP- Laboratoire LISER - ENSEM - UH2C 
// Code en language C permettant de trasmettre les valeurs analogiques 
// reçus des ports de l'arduino uno vers Raspberry Pi 
// via Bus I2C ou Port Serie.
// Mesure de température inspiré de https://arduino-info.wikispaces.com/MultipleTemperatureSensorsToLCD
// Mesure de tension inspiré de http://startingelectronics.org/articles/arduino/measuring-voltage-with-arduino/
// Mesure de vitesse de rotation inspiré de http://www.instructables.com/id/Measure-RPM-DIY-Portable-Digital-Tachometer/?ALLSTEPS
// ****************************************************************************************

//*****************************************************************************************
// Inclusions des bibliothèques

#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 7                   // Data wire is plugged into pin 7 on the Arduino

//*****************************************************************************************
// Initialisation de la bibliothèque One Wire
  OneWire oneWire(ONE_WIRE_BUS);         // Setup a oneWire instance to communicate with 
                                         // any OneWire devices (not just Maxim/Dallas 
                                         // temperature ICs)
                                         
//*****************************************************************************************
// Initialisation de la bibliothèque Dallas Temperature
// Pass our oneWire reference to Dallas Temperature.
  DallasTemperature temperture_sensors(&oneWire);   
  
//*****************************************************************************************
// Déclaration des variables

#define NUM_SAMPLES 25
const int on_off_button = 3;             // the number of the on_off_button pin
//const int speed_up_button = 3;           // the number of the speed_up_button pin
//const int speed_down_button = 4;         // the number of the speed_down_button pin
const int ledPin =  13;                  // the number of the LED pin
const int Moteur_Pin = 11;               // the number of the LED pin
      int alpha = 25;                    // le rapport cyclique de la vitesse du moteur
      float alpha_pcent; 
      int on_off_State = 0;              // variable for reading the pushbutton status
      int start_flag = 0;                // variable for reading the pushbutton status
      int speed_up_State = 0;            // variable for reading the speed_up_State status
      int speed_down_State = 0;          // variable for reading the speed_down_State status
      int courant_mot;
      int mVperAmp = 66;                 // use 100 for 20A Module and 66 for 30A Module
      float RawValue= 0;
      int ACSoffset = 2500; 
      double AmpsVoltage = 0;
      double Amps = 0;
      int  pot_value;

      double sum1 = 0;                      // sum of samples taken for motor current measerment
      double sum2 = 0;                      // sum of samples taken for motor voltage measurment 
      double sum3 = 0;                      // sum of samples taken for generator voltage measurment  
      unsigned char sample_count = 0;         // current sample number
      float Tension_moteur = 0.0;              // calculated voltage
      float Tension_gen = 0.0;

  DeviceAddress Probe01 = { 0x28, 0xFF, 0xA3, 0x27, 0x68, 0x14, 0x03, 0x76 }; 
  DeviceAddress Probe02 = { 0x28, 0xFF, 0x6C, 0x4C, 0x6D, 0x14, 0x04, 0x89 };
  DeviceAddress Probe03 = { 0x28, 0xFF, 0x74, 0x63, 0x6D, 0x14, 0x04, 0x21 };

//--------------------Tachometer section----------------------------------
// 
      volatile byte REV;                  //  VOLATILE DATA TYPE TO STORE REVOLUTIONS
      unsigned long int rpm;              //  DEFINE RPM 
      unsigned long time;                 //  DEFINE TIME TAKEN TO COVER ONE REVOLUTION
      long prevtime = 0;                  //  STORE IDLE TIME TO TOGGLE MENU
//--------------------END of Tachometer section----------------------------------
      
//*****************************************************************************************
// initialisations Générales 
void setup() {

  Serial.begin(9600);                    // initialize serial communication at 9600 bits 
                                         // per second:
  temperture_sensors.begin();            // Start up the library
                                         // IC Default 9 bit. If you have troubles consider 
                                         // upping it 12. Ups the delay giving the IC more 
                                         // time to process the temperature measurement
                                         // set the resolution to 9 bit (Can be 9 to 12 bits .. lower is faster)
  temperture_sensors.setResolution(Probe01, 9);
  temperture_sensors.setResolution(Probe02, 9);
  temperture_sensors.setResolution(Probe03, 9); 
  
  pinMode(ledPin, OUTPUT);               // initialize the LED pin as an output:
  pinMode(on_off_button, INPUT);         // initialize the on_off_button pin as an input:
//  pinMode(speed_up_button, INPUT);       // initialize the speed_up_button pin as an input:
//  pinMode(speed_down_button, INPUT);     // initialize the speed_down_button pin as an input:


//--------------------Tachometer section----------------------------------
     attachInterrupt(0, RPMCount, FALLING);     //  ADD A HIGH PRIORITY ACTION ( AN INTERRUPT)  WHEN THE SENSOR GOES FROM LOW TO HIGH
     REV = 0;      //  START ALL THE VARIABLES FROM 0
     rpm = 0;
     time = 0;
//--------------------END of Tachometer section----------------------------------

// For Arduino Uno, Nano, Micro Magician, Mini Driver, Lilly Pad and any other board using ATmega 8, 168 or 328**
 
//---------------------------------------------- Set PWM frequency for D5 & D6 -------------------------------
 
//TCCR0B = TCCR0B & B11111000 | B00000001;    // set timer 0 divisor to     1 for PWM frequency of 62500.00 Hz
//TCCR0B = TCCR0B & B11111000 | B00000010;    // set timer 0 divisor to     8 for PWM frequency of  7812.50 Hz
//  TCCR0B = TCCR0B & B11111000 | B00000011;    // set timer 0 divisor to    64 for PWM frequency of   976.56 Hz (The DEFAULT)
//TCCR0B = TCCR0B & B11111000 | B00000100;    // set timer 0 divisor to   256 for PWM frequency of   244.14 Hz
//TCCR0B = TCCR0B & B11111000 | B00000101;    // set timer 0 divisor to  1024 for PWM frequency of    61.04 Hz
 
 
//---------------------------------------------- Set PWM frequency for D9 & D10 ------------------------------
 
//TCCR1B = TCCR1B & B11111000 | B00000001;    // set timer 1 divisor to     1 for PWM frequency of 31372.55 Hz
//TCCR1B = TCCR1B & B11111000 | B00000010;    // set timer 1 divisor to     8 for PWM frequency of  3921.16 Hz
//  TCCR1B = TCCR1B & B11111000 | B00000011;    // set timer 1 divisor to    64 for PWM frequency of   490.20 Hz (The DEFAULT)
//TCCR1B = TCCR1B & B11111000 | B00000100;    // set timer 1 divisor to   256 for PWM frequency of   122.55 Hz
//TCCR1B = TCCR1B & B11111000 | B00000101;    // set timer 1 divisor to  1024 for PWM frequency of    30.64 Hz

//---------------------------------------------- Set PWM frequency for D3 & D11 ------------------------------
 
//TCCR2B = TCCR2B & B11111000 | B00000001;    // set timer 2 divisor to     1 for PWM frequency of 31372.55 Hz
  TCCR2B = TCCR2B & B11111000 | B00000010;    // set timer 2 divisor to     8 for PWM frequency of  3921.16 Hz
//TCCR2B = TCCR2B & B11111000 | B00000011;    // set timer 2 divisor to    32 for PWM frequency of   980.39 Hz
//TCCR2B = TCCR2B & B11111000 | B00000100;    // set timer 2 divisor to    64 for PWM frequency of   490.20 Hz (The DEFAULT)
//TCCR2B = TCCR2B & B11111000 | B00000101;    // set timer 2 divisor to   128 for PWM frequency of   245.10 Hz
//TCCR2B = TCCR2B & B11111000 | B00000110;    // set timer 2 divisor to   256 for PWM frequency of   122.55 Hz
//TCCR2B = TCCR2B & B11111000 | B00000111;    // set timer 2 divisor to  1024 for PWM frequency of    30.64 Hz

}




//*****************************************************************************************
// Boocle Principale
void loop() {

//---------------------------Acquisition des Données--------------------------------------

//--------------------Tachometer section----------------------------------
  long currtime = millis();                 // GET CURRENT TIME
  long idletime = currtime - prevtime;        //  CALCULATE IDLE TIME
  if(REV >= 5 )                  //  IT WILL UPDATE AFETR EVERY 5 READINGS
   {
       rpm = 30*1000/(millis() - time)*REV;       //  CALCULATE  RPM USING REVOLUTIONS AND ELAPSED TIME
       time = millis();                            
       REV = 0;
       prevtime = currtime;                        // RESET IDLETIME
   }
   prevtime = currtime;
   
//--------------------END of Tachometer section----------------------------------


 //---------- Mesure du cournant ------------------------------
//  int courant_mot = analogRead(A0);      // read the input on analog pin 0:
 
//courant_mot=map(courant_mot,);

    while (sample_count < NUM_SAMPLES) {
        sum1 += analogRead(A0);
        sample_count++;
//        delay(1);
    }
//   courant_mot = (float(sum1) / float(NUM_SAMPLES) );
 
   sample_count = 0;
 //---------- Fin Mesure du cournant ------------------------------
   
//---------- Mesure de la tension du moteur ------------------------------   
// Mesure de la tension
// take a number of analog samples and add them up
    while (sample_count < NUM_SAMPLES) {
        sum2 += analogRead(A1);
        sample_count++;
//       delay(1);
    }
    sample_count = 0;
//---------- Fin Mesure de la tension du moteur ------------------------------  

//---------- Mesure de la tension de la génératrice ------------------------------   
// Mesure de la tension
// take a number of analog samples and add them up
    while (sample_count < NUM_SAMPLES) {
        sum3 += analogRead(A2);
        sample_count++;
//       delay(1);
    }
    sample_count = 0;
//---------- Fin Mesure de la tension la génératrice ------------------------------  

 //---------- Mesure de température ------------------------------
  
  temperture_sensors.requestTemperatures(); // Send the command to get temperatures

 //---------- Fin Mesure de température ------------------------------


  on_off_State = digitalRead(on_off_button);   // read the state of the on_off_button value:
//  speed_up_State = digitalRead(speed_up_button);   // read the state of the speed_up_button value:
//  speed_down_State = digitalRead(speed_down_button);   // read the state of the speed_down_button value:
  
//---------------------------Calibrages et décalages--------------------------------------



  float(RawValue) = sum1 / NUM_SAMPLES ;
//  AmpsVoltage = ((float)RawValue / (float)1023) * (float)4.5; // Gets you mV
// Amps = (((float)AmpsVoltage - (float)ACSoffset) / (float)mVperAmp);
  Amps = 0.074 * (RawValue - 512 ); // http://embedded-lab.com/blog/?p=4529
     sum1 = 0; 
    // calculate the voltage
    // use 5.0 for a 5.0V ADC reference voltage
    // 5.015V is the calibrated reference voltage
    Tension_moteur = ((float)sum2 / (float)NUM_SAMPLES * 5.000) / 1023.0;
    // voltage multiplied by 4.3 when using voltage divider that
    // divides by 4.3  
    // 4.300 is the calibrated voltage dividevalue
    Tension_moteur *=4.450;
    sum2 = 0;
    
    Tension_gen = ((float)sum3 / (float)NUM_SAMPLES * 5.000) / 1023.0;
    // voltage multiplied by 4.3 when using voltage divider that
    // divides by 4.3  
    // 4.450 is the calibrated voltage dividevalue
    Tension_gen *=4.450;
    sum3 = 0;

    
//-------------------------------Commande du moteur----------------------------------------
//
  if (on_off_State == HIGH) {    // turn LED on:
    start_flag = ! start_flag;
    delay(50);        // delay in between reads for stability
  }
//
//  if (speed_up_State == HIGH && alpha < 255) 
//     { ++alpha;  // incrémenter alpha
//     }
//  if (speed_down_State == HIGH && alpha > 0) 
//     { --alpha;    // décrémenter alpha
//     }
//
  if (start_flag == HIGH) {    
      digitalWrite(ledPin, HIGH); // turn LED on:
      analogWrite(Moteur_Pin, alpha);
    }
  else {
      digitalWrite(ledPin, LOW); // turn LED off:
      analogWrite(Moteur_Pin, 0); // turn Motor off:
     }

// Commande avec Potentiometre 

  pot_value = analogRead(A3);
  alpha = map(pot_value, 0, 1023, 0, 255);  // map(value, fromLow, fromHigh, toLow, toHigh)
  alpha_pcent = map(alpha, 0, 255, 0, 100);





//---------------------Trasmission des Données Via port série--------------------------------

//   Serial.print(analogRead(A0));
// Serial.print("\t");
// Serial.print(RawValue);
//  Serial.print("\t");
//  Serial.print("I_moteur = ");  
  Serial.print(Amps,2);
//  Serial.print("A"); 
  Serial.print("\t"); 
//  Serial.print(" V_moteur ");  
  Serial.print(Tension_moteur,2);
//  Serial.print("V"); 
  Serial.print("\t");
//  Serial.print(" T_int "); 
  Serial.print(temperture_sensors.getTempC(Probe01));
  Serial.print("\t");
//  Serial.print(" T_ext "); 
  Serial.print(temperture_sensors.getTempC(Probe02));
  Serial.print("\t");
//  Serial.print(" T_H_bg "); 
  Serial.print(temperture_sensors.getTempC(Probe03));
  Serial.print("\t");
//  Serial.print("Alpha = "); 
  Serial.print(alpha_pcent, 2);
  Serial.print("\t");
//  Serial.print("start= "); 
  Serial.print("\t");
  Serial.print(start_flag);
  Serial.print("\t");
//  Serial.print(" V_gen ");  
  Serial.print(Tension_gen,2);
//  Serial.print("V"); 

  Serial.print("\t");
//  Serial.print("Calculated RPM ");    
  Serial.print((Tension_gen/0.0015),0);
  Serial.print("\t");
  Serial.print(rpm,DEC);
  
  Serial.println(" "); 
  
  
  delay(50);        // delay in between reads for stability

  
}
//*****************************************************************************************
// Fin Boocle Principale


//*****************************************************************************************
// Sous prog d'Interruptions 
//--------------------Tachometer section----------------------------------
   

 void RPMCount()                                // EVERYTIME WHEN THE SENSOR GOES FROM LOW TO HIGH , THIS FUNCTION WILL BE INVOKED 
 {
   REV++;                                         // INCREASE REVOLUTIONS
 }
//--------------------END of Tachometer section----------------------------------
//*****************************************************************************************
// Fin Sous prog d'Interruptions 
